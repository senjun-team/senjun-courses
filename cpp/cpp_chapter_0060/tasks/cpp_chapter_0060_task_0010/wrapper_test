import boost.ut;
import std;

#INJECT-b585472fa

bool is_opening_brace(char c)
{
    return c == '(' || c == '{' || c == '[';
}

std::string const is_opening_brace_body = "bool is_opening_brace(char c) { return c == '(' || c == '{' || c == '['; }";

std::string call_info(const std::string & s, const std::string & pred_body)
{
    return std::format(
        "index_of() was called with string \"{}\" and predicate.\n"
        "Predicate looks like:\n"
        "{}",
        s, pred_body
    );
}

void test_throws(const std::string & s)
{
    using namespace boost::ut;

    try
    {
        index_of(s, is_opening_brace);
        expect(false) << "Function index_of() must throw exception if predicate returns false for all characters\n" << call_info(s, is_opening_brace_body) << fatal;
    }
    catch(const std::runtime_error & e)
    {
        // Expected behavior
    }
    catch(...)
    {
        expect(false) << "Function index_of() must throw exception of type std::runtime_error\n" << call_info(s, is_opening_brace_body) << fatal;
    }
}

int main()
{
    using namespace boost::ut;

    "index_of() throws (std::string container)"_test = [] {
        std::vector cases{
            "", 
            "throws", 
            "1",
            };

        for (auto & s : cases)
            test_throws(s);
    };

    "index_of() calculates distance"_test = [] {
        std::vector<std::pair<std::string, std::size_t>> cases{
            {"(", 0}, 
            {"{{{", 0},
            {"1{", 1}, 
            {"1[3", 1}, 
            
            {"123[", 3},
            };

        for (auto & [s, plan] : cases)
            expect(
                index_of(s, is_opening_brace) == plan) 
                << std::format("Invalid result for string \"{}\"\n{}", s, call_info(s, is_opening_brace_body))   << fatal;
    };
}
