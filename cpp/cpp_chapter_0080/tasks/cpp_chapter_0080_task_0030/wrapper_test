#include "ut.hpp"

import std;

#INJECT-b585472fa

using namespace boost::ut;

// these values don't exist in container
const int max_val = 1000;
const int min_val = -1000;
const int mid_val = 4;

template <typename T>
bool is_vector(const T & c)
{
    return std::is_same<T, std::vector<typename T::value_type>>::value;
}

template<class C>
void check(const C & v, int x, int plan_index)
{
    std::string cont = is_vector(v) ? "std::vector" : "std::list";

    auto it = b_search(v.begin(), v.end(), x);
    if (plan_index == -1)
    {
        expect(it == v.end()) << std::format("b_search() didn't return end() while searching for value {} in {} {}. Instead it returned iterator to {}'th element", x, cont, v, std::distance(v.begin(), it)) << fatal;
        return;
    }

    expect(it != v.end()) << std::format("b_search() returned end() while searching for value {} in {} {}", x, cont, v) << fatal;
    
    const std::size_t fact_index = std::distance(v.begin(), it);
    expect(plan_index == fact_index) << std::format("b_search() returned wrong result while searching for value {} in {} {}. Expected iterator to element with index {}. But got iterator to element with index {}", x, cont, v, plan_index, fact_index) << fatal;
}

void check_case(const std::vector<int> & v)
{
    std::list<int> lst(v.begin(), v.end());

    for (std::size_t i = 0; i < v.size(); ++i)
    {
        int val = v[i];
        check(v, val, i);
        check(lst, val, i);
    }

    for (int val: {min_val, mid_val, max_val})
    {
        check(v, val, -1);
        check(lst, val, -1);
    }
}

int main()
{
    "corner case: empty container"_test = [] {
        std::vector<int> v = {};
        check_case(v);
    };

    "simple cases"_test = [] {
        std::vector<std::vector<int>> cases {
            {1},
            {1, 2},
            {1, 3, 5},
            {1, 3, 5, 8},
            {2, 3, 5, 6},
            {2, 5, 8, 9, 11, 12, 16},
            {-1, 0, 1},
            {-1, 0, 1, 5},
            {-1, 0, 1, 5, 6},
            {-1, 0, 1, 5, 6, 9}
        };

        for (const auto & v: cases)
            check_case(v);
    };

    "not so simple cases"_test = [] {
        std::vector<std::vector<int>> cases {
            {-52, -17, -15, 19, 59, 85, 100, 142, 163},
            {-500, -93, -91, -65, -56, -28, 41, 50, 122, 141, 156, 184},
            {-70, -38, 13, 22, 26, 108, 119, 131, 152, 163, 164, 172, 185, 194, 199},
            {-97, -90, -68, -47, -46, -25, -17, 2, 12, 26, 59, 71, 98, 107, 108, 117, 119, 166, 180, 191}
        };

        for (const auto & v: cases)
            check_case(v);
    };
}
