package main

import (
	"bytes"
	"io"
	"os"
	"strings"
	"testing"
)

func TestIsLucky(t *testing.T) {

	for i := 1; i < 21; i++ {

		if i > 10 && !isLucky(i) {
			t.Errorf("isLucky(%d) gets %t, wants %t", i, false, true)
		}
		if i <= 10 && isLucky(i) {
			t.Errorf("isLucky(%d) gets %t, wants %t", i, true, false)
		}
	}
}

func TestMain(t *testing.T) {
	old := os.Stdout // keep backup of the real stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	outC := make(chan string)
	// copy the output in a separate goroutine so printing can't block indefinitely
	go func() {
		var buf bytes.Buffer
		io.Copy(&buf, r)
		outC <- buf.String()
	}()

	main()

	// back to normal state
	w.Close()
	os.Stdout = old // restoring the real stdout
	out := <-outC
	out = strings.TrimSpace(out)

	// reading our temp stdout
	if out != "true" && out != "false" {
		t.Fatalf("main() prints %q, not \"true\" or \"false\"", strings.TrimSpace(out))
	}

}
